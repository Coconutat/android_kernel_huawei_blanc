
/**
 * Copyright (C) 2014 Hisilicon Ltd.
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License version 2 as
 *  publishhed by the Free Software Foundation.
 */

/dts-v1/;
/plugin/;
/include/ "CHARLOTTE_TUGL_V1_overlay.dtsi"

/ {
    board_id = <6523>;
};

&rootparam {
        hisi,dtbo_idx = <109>;
    hisi,boardid = <6 5 2 3>;
    hisi,boardname = "CHARLOTTE_TUGL_V2_POWER";
};


&smartpakit{
    dsp_img_name = "hifi_6403_tas_devkit.img";
    status = "ok";
};

&dp_aux_switch {
    aux_switch_from_fsa4476;
    status = "ok";
};

&amba {
    i2c@FDF0D000 {
        nfc@28 {
            clk_status ="xtal";
        };
    };
};

&amba {
    i2c@FDF0D000 {
        smartpa@34{
            status = "disabled";
        };
        smartpa@36{
            status = "disabled";
        };

tas2560_smartpa_l:smartpa@4C {
                      compatible = "huawei,smartpakit_i2c";
                      reg = <0x4C>;
                      /* 0 MAXIM, 1 NXP, 2 TI, 3 OTHER */
                      chip_vendor = <2>;
                      /* refer to smartpakit.out_device prop */
                      chip_id = <0>;
                      chip_model = "tas2560";
                      /* maybe trigger one irq after some chip reset, ext. tas2560
                       * debounce wait time unit: msecs */
                      reset_debounce_wait_time = <100>;
                      status = "ok";

                      /* reg_ctl node: a node contains three data<addr value ctl_type>
                       * ctl_type: 0 read reg(default), 1 write reg, 2 only time delay
                       * value:
                       *     read:  reg number(num >= 1)
                       *     write: reg value
                       *     delay: time delay
                       * time delay unit: msecs */
                      version_regs = <
                          0  0  1
                          125 1 0
                          >;
                      dump_regs = <
                          0 0   1
                          0 128 0
                          0 50  1
                          0 128 0
                          0 51  1
                          0 128 0
                          0 52  1
                          0 128 0
                          >;
                      hw_reset {
                          gpio_reset = <134>;
                          /* gpio_state node: a node contains two data<state delay>
                           * time delay unit: msecs */
                          ctl_sequence = <0 3 1 2>;
                      };
                      irq_handler {
                          gpio_irq = <200>;
                          /* 0x0 IRQF_TRIGGER_NONE, 0x1 IRQF_TRIGGER_RISING, 0x2 IRQF_TRIGGER_FALLING, 0x4 IRQF_TRIGGER_HIGH, 0x8 IRQF_TRIGGER_LOW*/
                          irq_flags = <2>;
                          /* whether or not need reset chip*/
                          need_reset;
                          rw_sequence = <
                              0  20 2
                              0  0  1
                              37 1  0
                              38 1  0
                              39 1  0
                              7  1  0
                              42 1  0
                              >;
                      };
                      regmap_cfg {
                          reg_bits = <8>;
                          val_bits = <8>;
                          /* 0 REGCACHE_NONE, 1 REGCACHE_RBTREE, 2 REGCACHE_COMPRESSED, 3 REGCACHE_FLAT */
                          cache_type = <0>;
                          max_register = <128>;
                      };
                  };
tas2560_smartpa_r:smartpa@4F {
                      compatible = "huawei,smartpakit_i2c";
                      reg = <0x4F>;
                      /* 0 MAXIM, 1 NXP, 2 TI, 3 OTHER */
                      chip_vendor = <2>;
                      /* refer to smartpakit.out_device prop */
                      chip_id = <1>;
                      chip_model = "tas2560";
                      /* maybe trigger one irq after some chip reset, ext. tas2560
                       * debounce wait time unit: msecs */
                      reset_debounce_wait_time = <100>;
                      status = "ok";

                      /* reg_ctl node: a node contains three data<addr value ctl_type>
                       * ctl_type: 0 read reg(default), 1 write reg, 2 only time delay
                       * value:
                       *     read:  reg number(num >= 1)
                       *     write: reg value
                       *     delay: time delay
                       * time delay unit: msecs */
                      version_regs = <
                          0   0   1
                          125 1   0
                          >;
                      dump_regs = <
                          0   0   1
                          0   128 0
                          0   50  1
                          0   128 0
                          0   51  1
                          0   128 0
                          0   52  1
                          0   128 0
                          >;
                      hw_reset {
                          gpio_reset = <146>;
                          /* gpio_state node: a node contains two data<state delay>
                           * time delay unit: msecs */
                          ctl_sequence = <0 3 1 2>;
                      };
                      irq_handler {
                          gpio_irq = <184>;
                          /* 0x0 IRQF_TRIGGER_NONE, 0x1 IRQF_TRIGGER_RISING, 0x2 IRQF_TRIGGER_FALLING, 0x4 IRQF_TRIGGER_HIGH, 0x8 IRQF_TRIGGER_LOW*/
                          irq_flags = <2>;
                          /* whether or not need reset chip*/
                          need_reset;
                          rw_sequence = <
                              0   20  2
                              0   0   1
                              37  1   0
                              38  1   0
                              39  1   0
                              7   1   0
                              42  1   0
                              >;
                      };
                      regmap_cfg {
                          reg_bits = <8>;
                          val_bits = <8>;
                          /* 0 REGCACHE_NONE, 1 REGCACHE_RBTREE, 2 REGCACHE_COMPRESSED, 3 REGCACHE_FLAT */
                          cache_type = <0>;
                          max_register = <128>;
                      };
                  };
    };
};
